package com.jk.risk.common.domain.enumeration;import java.util.Arrays;import java.util.List;/** * 类型 * User by allen * Date 2017/11/9. */public interface IEnum {    public static enum RateTypeEnum {        RATE("利率"),        DISCOUNT_FACTOR("贴现因子");        private String name;        RateTypeEnum(String name){            this.name = name;        }        public static RateTypeEnum of(String name) {            List<RateTypeEnum> list = Arrays.asList(RateTypeEnum.values());            for(RateTypeEnum bte : list){                if(name.equals(bte.name)) return bte;            }            return null;        }    }    public static enum LevelTypeEnum {        NATIONAL_DEBT("国债"),        AAA("AAA");        private String name;        LevelTypeEnum(String name){            this.name = name;        }        public static LevelTypeEnum of(String name) {            List<LevelTypeEnum> list = Arrays.asList(LevelTypeEnum.values());            for(LevelTypeEnum lte : list){                if(name.equals(lte.name)) return lte;            }            return null;        }    }    /**     * 场景类型     */    public static enum  SenceEnum {        BASE_SENCE("基础情景"),        AAA("AAA"),        AAPLUS("AA+"),        AA("AA"),        AAMINUS("AA-"),        APLUS("A+"),        A("A"),        B("B");        private String sence;        SenceEnum(String sence) {            this.sence = sence;        }        public static SenceEnum of(String name) {            List<SenceEnum> list = Arrays.asList(SenceEnum.values());            for(SenceEnum se : list){                if(name.equals(se.sence)) return se;            }            return null;        }    }    public static enum InputSheet {        InputAssets("利率风险计算-输入项_资产"),        InputInterestRate("利率风险计算-输入项_利率"),        InputPressureParam("利率风险计算-输入项_压力参数");        private String name;        InputSheet(String name) {            this.name = name;        }    }    /**     * 一级风险分类     */    public static enum ARiskType{        CreditRisk("信用风险"),        MarketRisk("市场风险");        private String name;        ARiskType(String name) {            this.name = name;        }        public static ARiskType of(String name) {            List<ARiskType> list = Arrays.asList(ARiskType.values());            for(ARiskType art : list){                if(name.equals(art.name)) return art;            }            return null;        }    }    /**     * 二级风险分类     */    public static enum BRiskType{        InterestRateRisk("利率风险"),        SpreadsRisk("利差风险"),        CounterpartyRisk("交易对手违约风险");        private String name;        BRiskType(String name) {            this.name = name;        }        public static BRiskType of(String name) {            List<BRiskType> list = Arrays.asList(BRiskType.values());            for(BRiskType brt : list){                if(name.equals(brt.name)) return brt;            }            return null;        }    }    /**     * 一级资产类别     */    public static enum AAssetsType {        FixedIncome("固定收益投资资产");        private String name;        AAssetsType(String name) {            this.name = name;        }        public static AAssetsType of(String name) {            List<AAssetsType> list = Arrays.asList(AAssetsType.values());            for(AAssetsType aat : list){                if(name.equals(aat.name)) return aat;            }            return null;        }    }    /**     * 二级资产类别     */    public static enum BAssetsType {        FixedIncomeFinance("固定收益投资资产"),        Bonds("债券");        private String name;        BAssetsType(String name) {            this.name = name;        }        public static BAssetsType of(String name) {            List<BAssetsType> list = Arrays.asList(BAssetsType.values());            for(BAssetsType bat : list){                if(name.equals(bat.name)) return bat;            }            return null;        }    }    /**     * 三级资产类别     */    public static enum CAssetsType {        EnterpriseDebt("企业债"),        CorpoErateDebt("公司债"),        FinancialDebt("金融债"),        ConvertibleBonds("可转债"),        SecondaryDebt("次级债"),        ClaimsPlan("债权计划"),        MixedCapitalDebt("债权计划");        private String name;        CAssetsType(String name) {            this.name = name;        }        public static CAssetsType of(String name) {            List<CAssetsType> list = Arrays.asList(CAssetsType.values());            for(CAssetsType cat : list){                if(name.equals(cat.name)) return cat;            }            return null;        }    }    /**     * 资产类别     */    public static enum AssetsType {        SaleableFinancial("可供出售类金融资产"),        TradingFinancial("交易性金融资产");        private String name;        AssetsType(String name) {            this.name = name;        }        public static AssetsType of(String name) {            List<AssetsType> list = Arrays.asList(AssetsType.values());            for(AssetsType at : list){                if(name.equals(at.name)) return at;            }            return null;        }    }    /**     * 账户类型     */    public static enum AccountType {        Universal("万能"),        SelfOwn("自有"),        CastvenE("投连"),        Dividends("分红"),        Tradition("传统");        private String name;        AccountType(String name) {            this.name = name;        }        public static AccountType of(String name) {            List<AccountType> list = Arrays.asList(AccountType.values());            for(AccountType at : list){                if(name.equals(at.name)) return at;            }            return null;        }    }    /**     * 计价方式     */    public static enum PricingWay {        Cost("成本法"),        FairValue("公允价值");        private String name;        PricingWay(String name) {            this.name = name;        }        public static PricingWay of(String name) {            List<PricingWay> list = Arrays.asList(PricingWay.values());            for(PricingWay pw : list){                if(name.equals(pw.name)) return pw;            }            return null;        }    }    /**     * 权利类型     */    public static enum RightType {        NoContains(0, "不含权"),        Redemption(1, "赎回权"),        Sellback(2, "回售权");        private int type;        private String name;        RightType(int type, String name) {            this.type = type;            this.name = name;        }        public static RightType of(int type) {            List<RightType> list = Arrays.asList(RightType.values());            for(RightType pt : list){                if(type == pt.type) return pt;            }            return null;        }    }    /**     * 信用级别     */    public static enum CreditLevel {        AAA,        GOVT,        AA,        AAPlus;    }}