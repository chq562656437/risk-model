package com.jk.risk.api;import com.google.common.collect.Maps;import com.rm.domain.UploadResult;import com.rm.service.PaymentService;import com.rm.util.exception.ErrorEnum;import com.rm.util.exception.RMSystemException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;import java.util.HashMap;import java.util.List;import java.util.Map;@RestController@RequestMapping("")public class FileUploadController {    private final static Logger logger = LoggerFactory.getLogger(FileUploadController.class);    @Autowired    private PaymentService paymentService;    private static boolean PROCESS_END = true;    /**     * 文件上传具体实现方法（单文件上传）     *     * @param file 上传文件     * @author allen     */    @RequestMapping(value = "/upload", method = {RequestMethod.POST, RequestMethod.GET})    public UploadResult upload(@RequestParam("file") MultipartFile file,                               HttpServletRequest request,                               HttpServletResponse response) {        return getUploadResult(file, request, response, true);    }    @RequestMapping(value = "/large/upload", method = {RequestMethod.POST, RequestMethod.GET})    public UploadResult uploadHigh(@RequestParam("file") MultipartFile file,                               HttpServletRequest request,                               HttpServletResponse response) {        return getUploadResult(file, request, response, false);    }    private UploadResult getUploadResult(@RequestParam("file") MultipartFile file,                                         HttpServletRequest request,                                         HttpServletResponse response,                                         boolean low) {        try {            response.setHeader("Access-Control-Allow-Origin", "*");            if(!PROCESS_END) return new UploadResult(false, "急啥，上次提交的我还没NENG完呢！！！");            if (!file.isEmpty()) {                logger.info("Upload file {}", file.getOriginalFilename());                String fileName = file.getOriginalFilename();                if (!(fileName.endsWith(".xls") || fileName.endsWith(".xlsx"))) {                    return new UploadResult(false, "文件格式应为slx或xlsx");                }                File dest = new File("/tmp/" + fileName);                file.transferTo(dest);                PROCESS_END = false;                String downFileName ;                try {                    downFileName = map2File(paymentService.getRate(dest, low));                }finally {                    PROCESS_END = true;                }                logger.info("process end....");                String url = String.format("%s://%s:%d%s?fileName=%s", request.getScheme(), request.getLocalAddr(),                        request.getLocalPort(), "/download", downFileName);                return new UploadResult(true, url);            } else {                return new UploadResult(false, "亲，别传空文件啊！！");            }        } catch (Exception e) {            logger.error(e.getMessage(), e);            return new UploadResult(false, "喔！谢特，出错了！" + e.getMessage());        }    }    /**     * 多文件上传 主要是使用了MultipartHttpServletRequest和MultipartFile     *     * @param request request     * @author allen     */    @RequestMapping(value = "/upload/batch", method = RequestMethod.POST)    public Object batchUpload(HttpServletRequest request, HttpServletResponse response) {        response.setHeader("Access-Control-Allow-Origin", "*");        List<MultipartFile> files = ((MultipartHttpServletRequest) request).getFiles("file");        if (files == null || files.isEmpty()) return "亲，你咋不上传文件捏。。。";        Map<String, Double> result = Maps.newConcurrentMap();        files.parallelStream().forEach(file -> {            String fileName = file.getOriginalFilename();            if (!file.isEmpty()) {                try {                    if (!(fileName.endsWith(".xls") || fileName.endsWith(".xlsx"))) {                        throw new RMSystemException(ErrorEnum.FileDataError, "文件格式应为slx或xlsx");                    }                    if (file.isEmpty())                        throw new RMSystemException(ErrorEnum.FileDataError, String.format("文件[%s]为空", fileName));                    File dest = new File("/tmp/" + fileName);                    file.transferTo(dest);                    Map<String, Double> map = paymentService.getRate(dest, true);                    result.putAll(map);                } catch (Exception e) {                    String errMsg = "You failed to upload [" + fileName + "] => " + e.getMessage();                    throw new RMSystemException(ErrorEnum.FileDataError, errMsg);                }            } else {                throw new RMSystemException(ErrorEnum.FileDataError, String.format("File [%s] is empty", file));            }        });        /*for (MultipartFile file : files) {            String fileName = file.getOriginalFilename();            if (!file.isEmpty()) {                try {                    if (!(fileName.endsWith(".xls") || fileName.endsWith(".xlsx"))) {                        return "文件格式应为slx或xlsx";                    }                    if (file.isEmpty()) return String.format("文件[%s]为空", fileName);                    File dest = new File("/tmp/" + fileName);                    file.transferTo(dest);                    Map<String, Double> map = paymentService.getRate(dest);                    result.putAll(map);                } catch (Exception e) {                    return "You failed to upload [" + fileName + "] => " + e.getMessage();                }            } else {                return String.format("File [%s] is empty", file);            }        }*/        try {            String downFileName = map2File(result);            logger.info("process multi file end....");            return String.format("%s://%s:%d%s?fileName=%s", request.getScheme(), request.getLocalAddr(),                    request.getLocalPort(), "/download", downFileName);        } catch (Exception e) {            throw new RMSystemException(e);        }    }    @RequestMapping("download")    public void download(            HttpServletResponse response,            @RequestParam("fileName") String fileName    ) throws Exception {        downFile(response, fileName);    }    public Object writeAndDown(HttpServletResponse response, Map<String, Double> map) throws Exception {        String fileName = map2File(map);        return downFile(response, fileName);    }    @RequestMapping("test")    public String test() {        return "test success";    }    private Object downFile(HttpServletResponse response, String fileName) throws Exception {        try (                OutputStream os = response.getOutputStream();                InputStream inputStream = new FileInputStream(fileName);                BufferedInputStream bis = new BufferedInputStream(inputStream)        ) {            response.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=IRR.txt");            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);            byte[] buff = new byte[1024];            while (bis.read(buff) != -1) {                os.write(buff, 0, buff.length);                os.flush();            }        }        return null;    }    private String map2File(Map<String, Double> map) throws Exception {        String fileName = "/tmp/irr/IRR.txt";        File file = new File(fileName);        if (!file.exists()) file.createNewFile();        try (FileWriter fw = new FileWriter(file)) {            StringBuilder sbf = new StringBuilder();            long flag = 0;            for (Map.Entry<String, Double> entry : map.entrySet()) {                sbf.append(entry.getKey()).append(":    ").append(entry.getValue());                sbf.append("\n");                flag++;                if (flag % 100 == 0) {                    fw.write(sbf.toString());                    sbf = new StringBuilder();                }            }            fw.write(sbf.toString());        }        return fileName;    }    @RequestMapping("/down")    public ResponseEntity<byte[]> download() throws IOException {        File file = new File("/tmp/irr/IRR.txt");        byte[] body;        InputStream is = new FileInputStream(file);        body = new byte[is.available()];        is.read(body);        HttpHeaders headers = new HttpHeaders();        headers.add("Content-Disposition", "attchement;filename=" + file.getName());        HttpStatus statusCode = HttpStatus.OK;        ResponseEntity<byte[]> entity = new ResponseEntity<>(body, headers, statusCode);        return entity;    }    public static void main(String[] args) throws Exception {//        java.io.File file = new File("/tmp/xxx.log");//        if(!file.exists()) file.createNewFile();        try (FileWriter fw = new FileWriter("/tmp/xxx.log")) {            Map<String, Double> map = new HashMap<String, Double>() {                {                    put("124", 23d);                    put("1234", 45d);                    put("asdfad", 34.23d);                }            };            for (Map.Entry<String, Double> entry : map.entrySet()) {                fw.write(entry.getKey() + ":" + entry.getValue());                fw.write("\n");            }        }    }}