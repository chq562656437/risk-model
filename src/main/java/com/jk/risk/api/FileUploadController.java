package com.jk.risk.api;import com.jk.risk.service.RiskService;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.*;@RestController@RequestMapping("upload")public class FileUploadController {    private final static Logger logger = LoggerFactory.getLogger(FileUploadController.class);    @Autowired    private RiskService riskService;    /**     * 文件上传具体实现方法（单文件上传）     *     * @param file 上传文件     * @author allen     */    @RequestMapping(value = "/upload", method = {RequestMethod.POST, RequestMethod.GET})    public Object upload(@RequestParam("file") MultipartFile file,                                         HttpServletRequest request,                                         HttpServletResponse response) {        try {            if (!file.isEmpty()) {                logger.info("Upload file {}", file.getOriginalFilename());                String fileName = file.getOriginalFilename();                if (!fileName.endsWith(".xlsx")) {                    return "文件格式应为xlsx";                }                File dest = new File("/tmp/" + fileName);                file.transferTo(dest);                String downFileName ;                try {                    downFileName = riskService.importInterestRatesFromFile(dest);                }finally {                    dest.delete();                }                logger.info("process end....");                String url = String.format("%s://%s:%d%s?fileName=%s", request.getScheme(), request.getLocalAddr(),                        request.getLocalPort(), "/download", downFileName);                return url;            } else {                return "文件不能为空";            }        } catch (Exception e) {            logger.error("Occured error while upload file, msg: {}, trace: {}", e.getMessage(), e);            return "出错了";        }    }    @RequestMapping("download")    public void download(            HttpServletResponse response,            @RequestParam("fileName") String fileName    ) throws Exception {        downFile(response, fileName);    }    private void downFile(HttpServletResponse response, String fileName) throws Exception {        try (                OutputStream os = response.getOutputStream();                InputStream inputStream = new FileInputStream(fileName);                BufferedInputStream bis = new BufferedInputStream(inputStream)        ) {            response.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);            response.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename="+fileName);            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);            byte[] buff = new byte[1024];            while (bis.read(buff) != -1) {                os.write(buff, 0, buff.length);                os.flush();            }        }    }    /**     * 下载方式1     */    @RequestMapping("/down")    public ResponseEntity<byte[]> download() throws IOException {        File file = new File("/tmp/test/test.txt");        byte[] body;        InputStream is = new FileInputStream(file);        body = new byte[is.available()];        is.read(body);        HttpHeaders headers = new HttpHeaders();        headers.add("Content-Disposition", "attchement;filename=" + file.getName());        HttpStatus statusCode = HttpStatus.OK;        ResponseEntity<byte[]> entity = new ResponseEntity<>(body, headers, statusCode);        return entity;    }}